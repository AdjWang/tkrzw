# Source of configuration for Tkrzw

#================================================================
# Generic Settings
#================================================================

# Package name
AC_INIT(tkrzw, 0.9.14)

# Package information
MYLIBVER=1
MYLIBREV=4
MYLIBFMT=0

# Targets
MYHEADERFILES="tkrzw_lib_common.h tkrzw_str_util.h tkrzw_cmd_util.h tkrzw_thread_util.h tkrzw_containers.h tkrzw_key_comparators.h tkrzw_file.h tkrzw_file_util.h tkrzw_file_std.h tkrzw_file_mmap.h tkrzw_file_pos.h tkrzw_dbm.h tkrzw_dbm_common_impl.h tkrzw_dbm_hash_impl.h tkrzw_dbm_hash.h tkrzw_dbm_tree_impl.h tkrzw_dbm_tree.h tkrzw_dbm_skip_impl.h tkrzw_dbm_skip.h tkrzw_dbm_tiny.h tkrzw_dbm_baby.h tkrzw_dbm_cache.h tkrzw_dbm_std.h tkrzw_dbm_poly.h tkrzw_dbm_shard.h tkrzw_index.h"
MYLIBRARYFILES="libtkrzw.a"
MYLIBOBJFILES="tkrzw_lib_common.o tkrzw_str_util.o tkrzw_cmd_util.o tkrzw_thread_util.o tkrzw_file_util.o tkrzw_file_std.o tkrzw_file_mmap.o tkrzw_file_pos.o tkrzw_dbm.o tkrzw_dbm_common_impl.o tkrzw_dbm_hash_impl.o tkrzw_dbm_hash.o tkrzw_dbm_tree_impl.o tkrzw_dbm_tree.o tkrzw_dbm_skip_impl.o tkrzw_dbm_skip.o tkrzw_dbm_tiny.o tkrzw_dbm_baby.o tkrzw_dbm_cache.o tkrzw_dbm_std.o tkrzw_dbm_poly.o tkrzw_dbm_shard.o"
MYCOMMANDFILES="tkrzw_build_util tkrzw_str_perf tkrzw_file_perf tkrzw_dbm_util tkrzw_dbm_perf"
MYTESTFILES="tkrzw_sys_config_test tkrzw_lib_common_test tkrzw_str_util_test tkrzw_cmd_util_test tkrzw_thread_util_test tkrzw_containers_test tkrzw_key_comparators_test tkrzw_file_util_test tkrzw_file_std_test tkrzw_file_mmap_test tkrzw_file_pos_test tkrzw_dbm_common_impl_test tkrzw_dbm_hash_impl_test tkrzw_dbm_tree_impl_test tkrzw_dbm_tree_test tkrzw_dbm_hash_test tkrzw_dbm_skip_impl_test tkrzw_dbm_skip_test tkrzw_dbm_tiny_test tkrzw_dbm_baby_test tkrzw_dbm_cache_test tkrzw_dbm_std_test tkrzw_dbm_poly_test tkrzw_dbm_shard_test tkrzw_index_test"
MYPCFILES="tkrzw.pc"

# Building flags
MYCFLAGS="-pthread -fPIC -fsigned-char"
MYCXXFLAGS="-std=c++17 -pthread -fPIC -fsigned-char"
MYCPPFLAGS="-I. -I\$(INCLUDEDIR)"
MYCPPFLAGS="$MYCPPFLAGS -DNDEBUG -D_GNU_SOURCE=1 -D_ISOC99_SOURCE=1 -D_POSIX_C_SOURCE=999999L"
MYCPPFLAGS="$MYCPPFLAGS -D_FILE_OFFSET_BITS=64 -D_REENTRANT -D__EXTENSIONS__"
MYLDFLAGS="-L. -L\$(LIBDIR)"
MYCMDLDFLAGS="-L. -L\$(LIBDIR)"
MYCMDLIBS="-ltkrzw"
MYTESTLIBS="-lgtest -lgmock -lpthread"
MYLDLIBPATH=""
MYLDLIBPATHENV="LD_LIBRARY_PATH"
MYFILEPERFMEMLOCKFLAGS=""
MYDBMPERFMEMLOCKFLAGS=""
MYPOSTCMD="true"

# Building paths
PATH=".:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin:$PATH"
CPATH=".:/usr/local/include:$CPATH"
LIBRARY_PATH=".:/usr/local/lib:$LIBRARY_PATH"
LD_LIBRARY_PATH=".:/usr/local/lib:$LD_LIBRARY_PATH"
PKG_CONFIG_PATH=".:/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH"
export PATH CPATH LIBRARY_PATH LD_LIBRARY_PATH PKG_CONFIG_PATH

#================================================================
# Options
#================================================================

# Internal variables
enables=""
is_static=""

# Development mode
AC_ARG_ENABLE(devel,
  AC_HELP_STRING([--enable-devel], [build for development]))
if test "$enable_devel" = "yes"
then
  MYCFLAGS="-pthread -Wall -ansi -pedantic -fPIC -fsigned-char -g0 -O2"
  MYCXXFLAGS="-std=c++17 -pthread -Wall -fPIC -fsigned-char -g0 -O2"
  MYCPPFLAGS="$MYCPPFLAGS -I/usr/local/include"
  MYLDFLAGS="$MYLDFLAGS -L/usr/local/lib"
  MYCMDLDFLAGS="$MYCMDLDFLAGS -L/usr/local/lib"
  enables="$enables (devel)"
fi

# Debug mode
AC_ARG_ENABLE(debug,
  AC_HELP_STRING([--enable-debug], [build for debugging]))
if test "$enable_debug" = "yes"
then
  MYCFLAGS="-Wall -ansi -pedantic -fPIC -fsigned-char -g -O0"
  MYCXXFLAGS="-std=c++17 -Wall -Wextra -Wno-unused-parameter -fPIC -fsigned-char -g -O0"
  MYCPPFLAGS="$MYCPPFLAGS -UNDEBUG -D_TKRWX_DEBUG"
  MYCPPFLAGS="$MYCPPFLAGS -I/usr/local/include"
  MYLDFLAGS="$MYLDFLAGS -L/usr/local/lib"
  MYCMDLDFLAGS="$MYCMDLDFLAGS -L/usr/local/lib"
  enables="$enables (debug)"
fi

# Profiling mode
AC_ARG_ENABLE(profile,
  AC_HELP_STRING([--enable-profile], [build for profiling]))
if test "$enable_profile" = "yes"
then
  MYCXXFLAGS="-std=c++17 -Wall -fPIC -fsigned-char -g -pg -O2 -fno-inline -pipe"
  MYCPPFLAGS="$MYCPPFLAGS -I/usr/local/include"
  MYLDFLAGS="$MYLDFLAGS -L/usr/local/lib"
  MYCMDLDFLAGS="$MYCMDLDFLAGS -L/usr/local/lib"
  enables="$enables (profile)"
fi

# Disable optimization
AC_ARG_ENABLE(opt,
  AC_HELP_STRING([--disable-opt], [build without optimization]))
if test "$enable_opt" = "no"
then
  MYCFLAGS="$MYCFLAGS -O0"
  MYCXXFLAGS="$MYCXXFLAGS -O0"
  enables="$enables (no-opt)"
fi

# Optimize for the native architecture
AC_ARG_ENABLE(optarch,
  AC_HELP_STRING([--enable-optarch], [build with optimization for the native architecture]))
if test "$enable_optarch" = "yes"
then
  MYCFLAGS="$MYCFLAGS -O3 -march=native"
  MYCXXFLAGS="$MYCXXFLAGS -O3 -march=native"
  enables="$enables (optarch)"
fi

# Static mode
AC_ARG_ENABLE(static,
  AC_HELP_STRING([--enable-static], [build by static linking]))
if test "$enable_static" = "yes"
then
  is_static="yes"
  enables="$enables (static)"
fi

# Disable shared object
AC_ARG_ENABLE(shared,
  AC_HELP_STRING([--disable-shared], [avoid to build shared libraries]))
if test "$enable_shared" = "no"
then
  enables="$enables (no-shared)"
fi

# Use the standard library only
AC_ARG_ENABLE(stdonly,
  AC_HELP_STRING([--enable-stdonly], [use the standard library only]))
if test "$enable_stdonly" = "yes"
then
  enables="$enables (stdonly)"
  MYCPPFLAGS="$MYCPPFLAGS -D_TKRZW_STDONLY"
fi

# Memory locking test flags
LOCKLIMIT="`ulimit -l 2>/dev/null`"
if test -z "$LOCKLIMIT"
then
  LOCKLIMIT=0
fi
if test "$LOCKLIMIT" = "unlimited" || test "$LOCKLIMIT" -ge 1024
then
  MYFILEPERFMEMLOCKFLAGS="--lock_memory 10"
  MYDBMPERFMEMLOCKFLAGS="--lock_mem_buckets"
else
  enables="$enables (omit-mlock-tests)"
fi

# Messages
printf '#================================================================\n'
printf '# Configuring Tkrzw version %s%s.\n' "$PACKAGE_VERSION" "$enables"
printf '#================================================================\n'

#================================================================
# Checking Commands and Libraries
#================================================================

# C and C++ compilers
AC_PROG_CC
AC_PROG_CXX
AC_LANG(C++)

# Reset variables
if test "$GCC" != "yes"
then
  AC_MSG_WARN([another compiler except for GCC was detected])
  MYCFLAGS=""
  MYCXXFLAGS=""
fi
test -n "$CFLAGS" && MYCFLAGS="$CFLAGS $MYCFLAGS"
test -n "$CXXFLAGS" && MYCXXFLAGS="$CXXFLAGS $MYCXXFLAGS"
test -n "$CPPFLAGS" && MYCPPFLAGS="$CPPFLAGS $MYCPPFLAGS"
test -n "$LDFLAGS" && MYLDFLAGS="$LDFLAGS $MYLDFLAGS"

# Byte order
AC_C_BIGENDIAN(MYCPPFLAGS="$MYCPPFLAGS -D_TKRWX_BIGEND")

# Underlying libraries
AC_CHECK_LIB(c, main)
AC_CHECK_LIB(m, main)
AC_CHECK_LIB(pthread, main)
AC_CHECK_LIB(rt, main)
AC_CHECK_LIB(stdc++, main)
AC_CHECK_LIB(tkrzw, main, AC_MSG_WARN([old version of Tkrzw was detected]))
MYLDLIBPATH="$LD_LIBRARY_PATH"

# Necessary headers
AC_CHECK_HEADER(stdlib.h, true, AC_MSG_ERROR([stdlib.h is required]))
AC_CHECK_HEADER(stdint.h, true, AC_MSG_ERROR([stdint.h is required]))
AC_CHECK_HEADER(unistd.h, true, AC_MSG_ERROR([unistd.h is required]))
AC_CHECK_HEADER(fcntl.h, true, AC_MSG_ERROR([fcntl.h is required]))
AC_CHECK_HEADER(dirent.h, true, AC_MSG_ERROR([dirent.h is required]))
AC_CHECK_HEADER(pthread.h, true, AC_MSG_ERROR([pthread.h is required]))
AC_CHECK_HEADER(utility, true, AC_MSG_ERROR([utility is required]))
AC_CHECK_HEADER(string, true, AC_MSG_ERROR([string is required]))
AC_CHECK_HEADER(atomic, true, AC_MSG_ERROR([atomic is required]))
AC_CHECK_HEADER(mutex, true, AC_MSG_ERROR([mutex is required]))
AC_CHECK_HEADER(thread, true, AC_MSG_ERROR([thread is required]))
AC_CHECK_HEADER(regex, true, AC_MSG_ERROR([regex is required]))
AC_CHECK_HEADER(cstdint, true, AC_MSG_ERROR([cstdint is required]))

# Static linking
if test "$is_static" = "yes"
then
  MYCMDLDFLAGS="$MYCMDLDFLAGS -static"
  LIBS=`echo "${LIBS}" |\
    sed -e 's/-lpthread/-Wl,--whole-archive -lpthread -Wl,--no-whole-archive/'`
fi

# As-needed linking
if uname | grep Linux >config.tmp
then
  MYLDFLAGS="$MYLDFLAGS -Wl,-rpath-link,.:/usr/local/lib:$MYLDLIBPATH"
  MYLDFLAGS="$MYLDFLAGS -Wl,--as-needed"
fi

# Shared libraries
if test "$enable_shared" != "no" && test "$enable_profile" != "yes"
then
  if uname | grep Darwin >config.tmp
  then
    MYLIBRARYFILES="$MYLIBRARYFILES libtkrzw.$MYLIBVER.$MYLIBREV.0.dylib"
    MYLIBRARYFILES="$MYLIBRARYFILES libtkrzw.$MYLIBVER.dylib"
    MYLIBRARYFILES="$MYLIBRARYFILES libtkrzw.dylib"
    MYLDLIBPATHENV="DYLD_LIBRARY_PATH"
  else
    MYLIBRARYFILES="$MYLIBRARYFILES libtkrzw.so.$MYLIBVER.$MYLIBREV.0"
    MYLIBRARYFILES="$MYLIBRARYFILES libtkrzw.so.$MYLIBVER"
    MYLIBRARYFILES="$MYLIBRARYFILES libtkrzw.so"
  fi
fi

#================================================================
# Generic Settings
#================================================================

# Export variables
AC_SUBST(MYLIBVER)
AC_SUBST(MYLIBREV)
AC_SUBST(MYLIBFMT)
AC_SUBST(MYHEADERFILES)
AC_SUBST(MYLIBRARYFILES)
AC_SUBST(MYLIBOBJFILES)
AC_SUBST(MYCOMMANDFILES)
AC_SUBST(MYTESTFILES)
AC_SUBST(MYPCFILES)
AC_SUBST(MYCFLAGS)
AC_SUBST(MYCXXFLAGS)
AC_SUBST(MYCPPFLAGS)
AC_SUBST(MYLDFLAGS)
AC_SUBST(MYCMDLDFLAGS)
AC_SUBST(MYCMDLIBS)
AC_SUBST(MYTESTLIBS)
AC_SUBST(MYLDLIBPATH)
AC_SUBST(MYLDLIBPATHENV)
AC_SUBST(MYFILEPERFMEMLOCKFLAGS)
AC_SUBST(MYDBMPERFMEMLOCKFLAGS)
AC_SUBST(MYPOSTCMD)

# Targets
AC_OUTPUT(Makefile tkrzw.pc)

# Messages
printf '#================================================================\n'
printf '# Ready to make.\n'
printf '#================================================================\n'

# END OF FILE
