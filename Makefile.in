# Makefile for Tkrzw

#================================================================
# Setting Variables
#================================================================

# Generic settings
SHELL := @SHELL@

# Package information
PACKAGE := @PACKAGE_NAME@
PACKAGE_TARNAME := @PACKAGE_TARNAME@
VERSION := @PACKAGE_VERSION@
PACKAGEDIR := $(PACKAGE)-$(VERSION)
PACKAGETGZ := $(PACKAGE)-$(VERSION).tar.gz
LIBVER := @MYLIBVER@
LIBREV := @MYLIBREV@
LIBFMT := @MYLIBFMT@

# Targets
HEADERFILES := @MYHEADERFILES@
LIBRARYFILES := @MYLIBRARYFILES@
LIBOBJFILES := @MYLIBOBJFILES@
COMMANDFILES := @MYCOMMANDFILES@
TESTFILES := @MYTESTFILES@
PCFILES := @MYPCFILES@

# Install destinations
prefix := @prefix@
exec_prefix := @exec_prefix@
datarootdir := @datarootdir@
INCLUDEDIR := @includedir@
LIBDIR := @libdir@
BINDIR := @bindir@
LIBEXECDIR := @libexecdir@
PCDIR := @libdir@/pkgconfig
DESTDIR :=

# Building configuration
CC := @CC@
CXX := @CXX@
CPPFLAGS := @MYCPPFLAGS@ \
  -D_TKRZW_PREFIX="\"$(prefix)\"" -D_TKRZW_INCLUDEDIR="\"$(INCLUDEDIR)\"" \
  -D_TKRZW_LIBDIR="\"$(LIBDIR)\"" -D_TKRZW_BINDIR="\"$(BINDIR)\"" \
  -D_TKRZW_LIBEXECDIR="\"$(LIBEXECDIR)\"" \
  -D_TKRZW_APPINC="\"-I$(INCLUDEDIR)\"" -D_TKRZW_APPLIBS="\"-L$(LIBDIR) @MYCMDLIBS@ @LIBS@\"" \
  -D_TKRZW_PKG_VERSION="\"$(VERSION)\"" -D_TKRZW_LIB_VERSION="\"$(LIBVER).$(LIBREV).$(LIBFMT)\""
CFLAGS := @MYCFLAGS@
CXXFLAGS := @MYCXXFLAGS@
LDFLAGS := @MYLDFLAGS@
CMDLDFLAGS := @MYCMDLDFLAGS@
CMDLIBS := @MYCMDLIBS@
TESTLIBS := @MYTESTLIBS@
LIBS := @LIBS@
RUNENV := @MYLDLIBPATHENV@=@MYLDLIBPATH@
FILEPERFMEMLOCKFLAGS=@MYFILEPERFMEMLOCKFLAGS@
DBMPERFMEMLOCKFLAGS=@MYDBMPERFMEMLOCKFLAGS@
POSTCMD := @MYPOSTCMD@

#================================================================
# Actions
#================================================================

all : $(LIBRARYFILES) $(COMMANDFILES)
	@$(POSTCMD)
	@printf '\n'
	@printf '#================================================================\n'
	@printf '# Ready to install.\n'
	@printf '#================================================================\n'

clean :
	rm -f $(LIBRARYFILES) $(LIBOBJFILES) $(COMMANDFILES) $(TESTFILES)
	rm -f *.o *.d *.gch a.out check.in check.out gmon.out *.log *.vlog \
	  *.tkh *.tkt *~ hoge moge tako ika uni doc/*~
	rm -Rf casket*

untabify :
	ls *.cc *.h *.c *.idl | while read name ; \
	  do \
	    sed -e 's/\t/        /g' -e 's/ *$$//' $$name > $$name~; \
	    [ -f $$name~ ] && mv -f $$name~ $$name ; \
	  done

setversion :
	ls VCMakefile | while read name ; \
	  do \
	    sed -e "s/^PKG_VERSION = .*/PKG_VERSION = $(VERSION)/" \
	      -e "s/^LIB_VERSION = .*/LIB_VERSION = $(LIBVER).$(LIBREV).$(LIBFMT)/" $$name > $$name~ ; \
	    [ -f $$name~ ] && mv -f $$name~ $$name ; \
    done

install :
	mkdir -p $(DESTDIR)$(INCLUDEDIR)
	cp -Rf $(HEADERFILES) $(DESTDIR)$(INCLUDEDIR)
	mkdir -p $(DESTDIR)$(LIBDIR)
	cp -Rf $(LIBRARYFILES) $(DESTDIR)$(LIBDIR)
	mkdir -p $(DESTDIR)$(BINDIR)
	cp -Rf $(COMMANDFILES) $(DESTDIR)$(BINDIR)
	mkdir -p $(DESTDIR)$(PCDIR)
	cp -Rf $(PCFILES) $(DESTDIR)$(PCDIR)
	@printf '\n'
	@printf '#================================================================\n'
	@printf '# Thanks for using Tkrzw.\n'
	@printf '#================================================================\n'

install-strip :
	$(MAKE) DESTDIR=$(DESTDIR) install
	cd $(DESTDIR)$(BINDIR) && strip $(COMMANDFILES)

uninstall :
	-cd $(DESTDIR)$(INCLUDEDIR) && rm -f $(HEADERFILES)
	-cd $(DESTDIR)$(LIBDIR) && rm -f $(LIBRARYFILES)
	-cd $(DESTDIR)$(BINDIR) && rm -f $(COMMANDFILES)
	-cd $(DESTDIR)$(PCDIR) && rm -f $(PCFILES)

dist :
	$(MAKE) untabify
	$(MAKE) setversion
	$(MAKE) distclean
	rm -Rf "../$(PACKAGEDIR)" "../$(PACKAGETGZ)"
	cd .. && cp -R tkrzw $(PACKAGEDIR) && \
	  tar --exclude=".*" -cvf - $(PACKAGEDIR) | gzip -c > $(PACKAGETGZ)
	rm -Rf "../$(PACKAGEDIR)"
	sync ; sync

distclean : clean apidocclean
	[ ! -f example/Makefile ] || cd example && $(MAKE) clean
	rm -Rf Makefile tkrzw.pc \
	  config.cache config.log config.status config.tmp autom4te.cache

check :
	$(MAKE) check-build-util
	$(MAKE) check-str-perf
	$(MAKE) check-file-perf
	$(MAKE) check-hashdbm-perf
	$(MAKE) check-hashdbm-util
	$(MAKE) check-treedbm-perf
	$(MAKE) check-treedbm-util
	$(MAKE) check-skipdbm-perf
	$(MAKE) check-skipdbm-util
	$(MAKE) check-tinydbm-perf
	$(MAKE) check-babydbm-perf
	$(MAKE) check-cachedbm-perf
	$(MAKE) check-stddbm-perf
	$(MAKE) check-polydbm-perf
	$(MAKE) check-polydbm-util
	$(MAKE) check-sharddbm-perf
	$(MAKE) check-sharddbm-util
	$(MAKE) check-index-perf
	rm -Rf casket*
	@printf '\n'
	@printf '#================================================================\n'
	@printf '# Checking completed.\n'
	@printf '#================================================================\n'

check-build-util :
	rm -Rf casket*
	$(RUNENV) $(RUNCMD) ./tkrzw_build_util version
	$(RUNENV) $(RUNCMD) ./tkrzw_build_util config
	$(RUNENV) $(RUNCMD) ./tkrzw_build_util config -v
	$(RUNENV) $(RUNCMD) ./tkrzw_build_util config -i
	$(RUNENV) $(RUNCMD) ./tkrzw_build_util config -l
	$(RUNENV) $(RUNCMD) ./tkrzw_build_util config -p

check-str-perf :
	$(RUNENV) $(RUNCMD) ./tkrzw_str_perf search \
	  --iter 1000 --text 2000 --pattern 5 --chars 10
	$(RUNENV) $(RUNCMD) ./tkrzw_str_perf search \
	  --iter 1000 --text 2000 --pattern 5 --chars 10 --whole 3
	$(RUNENV) $(RUNCMD) ./tkrzw_str_perf search \
	  --iter 1000 --text 2000 --pattern 5 --chars 10 --batch 3

check-file-perf :
	rm -Rf casket*
	$(RUNENV) $(RUNCMD) ./tkrzw_file_perf sequence --file std \
	  --iter 50000 --threads 5 --size 20 casket
	$(RUNENV) $(RUNCMD) ./tkrzw_file_perf sequence --file std \
	  --iter 50000 --threads 5 --size 20 --random casket
	$(RUNENV) $(RUNCMD) ./tkrzw_file_perf sequence --file mmap-para \
	  --iter 50000 --threads 5 --size 20 --append casket
	$(RUNENV) $(RUNCMD) ./tkrzw_file_perf wicked --file mmap-para \
	  --iter 50000 --threads 5 --size 20 casket
	$(RUNENV) $(RUNCMD) ./tkrzw_file_perf sequence --file mmap-atom \
	  --iter 50000 --threads 5 --size 20  casket
	$(RUNENV) $(RUNCMD) ./tkrzw_file_perf sequence --file mmap-para \
	  --iter 50000 --threads 5 --size 20 --alloc_init 1 --alloc_inc 1.2 \
	  $(FILEPERFMEMLOCKFLAGS) casket
	$(RUNENV) $(RUNCMD) ./tkrzw_file_perf sequence --file mmap-para \
	  --iter 50000 --threads 5 --size 20 --alloc_init 1 --alloc_inc 1.2 --random casket
	$(RUNENV) $(RUNCMD) ./tkrzw_file_perf sequence --file mmap-para \
	  --iter 50000 --threads 5 --size 20 --alloc_init 1 --alloc_inc 1.2 --append casket
	$(RUNENV) $(RUNCMD) ./tkrzw_file_perf wicked --file mmap-para \
	  --iter 50000 --threads 5 --size 20 --alloc_init 1 --alloc_inc 1.2 casket
	$(RUNENV) $(RUNCMD) ./tkrzw_file_perf sequence --file mmap-atom \
	  --iter 50000 --threads 5 --size 20 --alloc_init 1 --alloc_inc 1.2 \
	  $(FILEPERFMEMLOCKFLAGS) casket
	$(RUNENV) $(RUNCMD) ./tkrzw_file_perf sequence --file mmap-atom \
	  --iter 50000 --threads 5 --size 20 --alloc_init 1 --alloc_inc 1.2 --random casket
	$(RUNENV) $(RUNCMD) ./tkrzw_file_perf sequence --file mmap-atom \
	  --iter 50000 --threads 5 --size 20 --alloc_init 1 --alloc_inc 1.2 --append casket
	$(RUNENV) $(RUNCMD) ./tkrzw_file_perf wicked --file mmap-atom \
	  --iter 50000 --threads 5 --size 20 --alloc_init 1 --alloc_inc 1.2 casket
	$(RUNENV) $(RUNCMD) ./tkrzw_file_perf sequence --file pos-para \
	  --iter 50000 --threads 5 --size 20 --alloc_init 1 --alloc_inc 1.2 casket
	$(RUNENV) $(RUNCMD) ./tkrzw_file_perf sequence --file pos-para \
	  --iter 50000 --threads 5 --size 20 --alloc_init 1 --alloc_inc 1.2 --random casket
	$(RUNENV) $(RUNCMD) ./tkrzw_file_perf sequence --file pos-para \
	  --iter 50000 --threads 5 --size 20 --alloc_init 1 --alloc_inc 1.2 --append casket
	$(RUNENV) $(RUNCMD) ./tkrzw_file_perf wicked --file pos-para \
	  --iter 50000 --threads 5 --size 20 --alloc_init 1 --alloc_inc 1.2 casket
	$(RUNENV) $(RUNCMD) ./tkrzw_file_perf sequence --file pos-atom \
	  --iter 50000 --threads 5 --size 20 --alloc_init 1 --alloc_inc 1.2 casket
	$(RUNENV) $(RUNCMD) ./tkrzw_file_perf sequence --file pos-atom \
	  --iter 50000 --threads 5 --size 20 --alloc_init 1 --alloc_inc 1.2 --random casket
	$(RUNENV) $(RUNCMD) ./tkrzw_file_perf sequence --file pos-atom \
	  --iter 50000 --threads 5 --size 20 --alloc_init 1 --alloc_inc 1.2 --append casket
	$(RUNENV) $(RUNCMD) ./tkrzw_file_perf wicked --file pos-atom \
	  --iter 50000 --threads 5 --size 20 --alloc_init 1 --alloc_inc 1.2 casket

check-hashdbm-perf :
	rm -Rf casket*
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf sequence --dbm hash --file mmap-para --path casket.tkh \
	  --iter 20000 --threads 5 --size 8 --buckets 100000 $(DBMPERFMEMLOCKFLAGS)
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf sequence --dbm hash --file mmap-para --path casket.tkh \
	  --iter 20000 --threads 5 --size 8 --buckets 100000 $(DBMPERFMEMLOCKFLAGS) --append
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf sequence --dbm hash --file mmap-para --path casket.tkh \
	  --iter 20000 --threads 5 --size 8 --buckets 100000 --random_key --random_value
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf sequence --dbm hash --file mmap-para --path casket.tkh \
	  --iter 20000 --threads 5 --size 8 --buckets 100000 --random_key --random_value --append
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf parallel --dbm hash --file mmap-para --path casket.tkh \
	  --iter 20000 --threads 5 --size 8 --buckets 100000 --random_key --random_value
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf parallel --dbm hash --file mmap-para --path casket.tkh \
	  --iter 20000 --threads 5 --size 8 --buckets 100000 --random_key --random_value --append
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf parallel --dbm hash --file mmap-para --path casket.tkh \
	  --iter 100000 --threads 1 --size 8 --buckets 10000 --random_key --random_value --rebuild
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf parallel --dbm hash --file mmap-para --path casket.tkh \
	  --iter 100000 --threads 1 --size 8 --buckets 10000 $(DBMPERFMEMLOCKFLAGS) \
	  --random_key --random_value --keys 10000 --rebuild --append
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf parallel --dbm hash --file mmap-para --path casket.tkh \
	  --iter 10000 --threads 5 --size 8 --buckets 1000 $(DBMPERFMEMLOCKFLAGS) \
	  --random_key --random_value --keys 5000 --rebuild --append  --sleep 0.0001
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf wicked --dbm hash --file mmap-para --path casket.tkh \
	  --iter 20000 --threads 5 --size 8 --buckets 100000 $(DBMPERFMEMLOCKFLAGS) \
	  --iterator --clear --rebuild
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf wicked --dbm hash --file mmap-para --path casket.tkh \
	  --iter 20000 --threads 5 --size 8 --buckets 100000 $(DBMPERFMEMLOCKFLAGS) \
	  --append --iterator --clear --rebuild

check-hashdbm-util :
	rm -Rf casket*
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util create --dbm hash --buckets 10 casket.tkh
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util set --dbm hash casket.tkh one first
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util set --dbm hash casket.tkh two second
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util set --dbm hash casket.tkh three third
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util set --dbm hash casket.tkh four fourth
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util remove --dbm hash casket.tkh four
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util set --dbm hash casket.tkh five fifth
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util get --dbm hash casket.tkh two
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util export --dbm hash casket.tkh casket.flat
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util create --dbm hash --buckets 10 casket-2.tkh
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util import --dbm hash casket-2.tkh casket.flat
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util list --dbm hash casket-2.tkh
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util list --dbm hash --jump three --items 2 casket-2.tkh
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util export --dbm hash --tsv casket.tkh casket.tsv
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util create --dbm hash --buckets 10 casket-3.tkh
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util import --dbm hash --tsv casket-3.tkh casket.tsv
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util get --dbm hash casket-3.tkh three
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util rebuild --dbm hash casket.tkh
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util inspect --dbm hash casket.tkh
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util restore --dbm hash casket.tkh casket-new.tkh
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util set --dbm hash casket-new.tkh four fourth
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util get --dbm hash casket-new.tkh one
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util list --dbm hash casket-new.tkh
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util inspect --dbm hash casket-new.tkh
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util merge --dbm hash casket-new.tkh casket.tkh

check-treedbm-perf :
	rm -Rf casket*
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf sequence --dbm tree --file mmap-para --path casket.tkt \
	  --iter 20000 --threads 5 --size 8 --max_page_size 200 --max_branches 8
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf sequence --dbm tree --file mmap-para --path casket.tkt \
	  --iter 20000 --threads 5 --size 8 --max_page_size 200 --max_branches 8 --append
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf sequence --dbm tree --file mmap-para --path casket.tkt \
	  --iter 20000 --threads 5 --size 8 --max_page_size 200 --max_branches 8 \
	  --random_key --random_value
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf sequence --dbm tree --file mmap-para --path casket.tkt \
	  --iter 20000 --threads 5 --size 8 --max_page_size 200 --max_branches 8 \
	  --random_key --random_value --append
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf parallel --dbm tree --file mmap-para --path casket.tkt \
	  --iter 20000 --threads 5 --size 8 --max_page_size 200 --max_branches 8 \
	  --random_key --random_value
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf parallel --dbm tree --file mmap-para --path casket.tkt \
	  --iter 20000 --threads 5 --size 8 --max_page_size 200 --max_branches 8 \
	  --random_key --random_value --append
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf parallel --dbm tree --file mmap-para --path casket.tkt \
	  --iter 100000 --threads 1 --size 8 --max_page_size 200 --max_branches 8 \
	  --random_key --random_value --rebuild
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf parallel --dbm tree --file mmap-para --path casket.tkt \
	  --iter 100000 --threads 1 --size 8 --max_page_size 200 --max_branches 8 \
	  --max_cached_pages 256 --random_key --random_value --keys 10000 --rebuild --append
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf parallel --dbm tree --file mmap-para --path casket.tkt \
	  --iter 10000 --threads 5 --size 8 --buckets 1000 $(DBMPERFMEMLOCKFLAGS) \
	  --max_page_size 200 --max_branches 8 \
	  --random_key --random_value --keys 5000 --rebuild --append  --sleep 0.0001
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf wicked --dbm tree --file mmap-para --path casket.tkt \
	  --iter 20000 --threads 5 --size 8 --max_page_size 200 --max_branches 8 \
	  --iterator --clear --rebuild
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf wicked --dbm tree --file mmap-para --path casket.tkt \
	  --iter 20000 --threads 5 --size 8 --max_page_size 200 --max_branches 8 \
	  --append --iterator --clear --rebuild

check-treedbm-util :
	rm -Rf casket*
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util create --dbm tree --buckets 10 casket.tkt
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util set --dbm tree casket.tkt one first
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util set --dbm tree casket.tkt two second
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util set --dbm tree casket.tkt three third
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util set --dbm tree casket.tkt four fourth
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util remove --dbm tree casket.tkt four
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util set --dbm tree casket.tkt five fifth
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util get --dbm tree casket.tkt two
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util export --dbm tree casket.tkt casket.flat
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util create --dbm tree --buckets 10 casket-2.tkt
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util import --dbm tree casket-2.tkt casket.flat
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util list --dbm tree casket-2.tkt
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util list --dbm tree --jump three --items 2 casket-2.tkt
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util export --dbm tree --tsv casket.tkt casket.tsv
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util create --dbm tree --buckets 10 casket-3.tkt
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util import --dbm tree --tsv casket-3.tkt casket.tsv
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util get --dbm tree casket-3.tkt three
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util rebuild --dbm tree casket.tkt
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util inspect --dbm tree casket.tkt
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util restore --dbm tree casket.tkt casket-new.tkt
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util set --dbm tree casket-new.tkt four fourth
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util get --dbm tree casket-new.tkt one
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util list --dbm tree casket-new.tkt
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util inspect --dbm tree casket-new.tkt
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util merge --dbm tree casket-new.tkt casket.tkt

check-skipdbm-perf :
	rm -Rf casket*
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf sequence --dbm skip --file mmap-para --path casket.tks \
	  --iter 20000 --threads 5 --size 8 --step_unit 4 --max_level 10
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf sequence --dbm skip --file mmap-para --path casket.tks \
	  --iter 20000 --threads 5 --size 8 --step_unit 2 --max_level 20 --random_key --random_value
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf sequence --dbm skip --file pos-para --path casket.tks \
	  --iter 100000 --size 8 --step_unit 8 --max_level 8 --insert_in_order
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf parallel --dbm skip --file pos-para --path casket.tks \
	  --iter 20000 --threads 5 --size 8 --step_unit 3 --max_level 13
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf wicked --dbm skip --file pos-para --path casket.tks \
	  --iter 20000 --threads 5 --size 8 --step_unit 5 --max_level 9

check-skipdbm-util :
	rm -Rf casket*
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util create --dbm skip --buckets 10 casket.tks
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util set --dbm skip casket.tks one first
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util set --dbm skip casket.tks two second
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util set --dbm skip casket.tks three third
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util set --dbm skip casket.tks four fourth
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util remove --dbm skip casket.tks four
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util set --dbm skip casket.tks five fifth
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util get --dbm skip casket.tks two
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util export --dbm skip casket.tks casket.flat
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util create --dbm skip --buckets 10 casket-2.tks
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util import --dbm skip casket-2.tks casket.flat
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util list --dbm skip casket-2.tks
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util list --dbm skip --jump one --items 2 casket-2.tks
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util export --dbm skip --tsv casket.tks casket.tsv
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util create --dbm skip --buckets 10 casket-3.tks
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util import --dbm skip --tsv casket-3.tks casket.tsv
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util get --dbm skip casket-3.tks three
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util rebuild --dbm skip casket.tks
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util inspect --dbm skip casket.tks
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util restore --dbm skip casket.tks casket-new.tks
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util set --dbm skip casket-new.tks four fourth
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util get --dbm skip casket-new.tks one
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util list --dbm skip casket-new.tks
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util inspect --dbm skip casket-new.tks
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util merge --dbm skip --reducer last casket-new.tks casket.tks

check-tinydbm-perf :
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf sequence --dbm tiny \
	  --iter 20000 --threads 5 --size 8
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf sequence --dbm tiny \
	  --iter 20000 --threads 5 --size 8 --random_key --random_value
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf parallel --dbm tiny \
	  --iter 20000 --threads 5 --size 8 --random_key --random_value
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf wicked --dbm tiny \
	  --iter 20000 --threads 5 --size 8 --iterator --clear --rebuild

check-babydbm-perf :
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf sequence --dbm baby \
	  --iter 20000 --threads 5 --size 8
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf sequence --dbm baby \
	  --iter 20000 --threads 5 --size 8 --random_key --random_value
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf parallel --dbm baby \
	  --iter 20000 --threads 5 --size 8 --random_key --random_value
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf wicked --dbm baby \
	  --iter 20000 --threads 5 --size 8 --iterator --clear --rebuild

check-cachedbm-perf :
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf sequence --dbm cache \
	  --iter 20000 --threads 5 --size 8
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf sequence --dbm cache \
	  --iter 20000 --threads 5 --size 8 --random_key --random_value
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf parallel --dbm cache \
	  --iter 20000 --threads 5 --size 8 --random_key --random_value
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf wicked --dbm cache \
	  --iter 20000 --threads 5 --size 8 --iterator --clear --rebuild --cap_rec_num 4000

check-stddbm-perf :
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf sequence --dbm stdhash \
	  --iter 20000 --threads 5 --size 8
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf sequence --dbm stdhash \
	  --iter 20000 --threads 5 --size 8 --random_key --random_value
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf parallel --dbm stdhash \
	  --iter 20000 --threads 5 --size 8 --random_key --random_value
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf wicked --dbm stdhash \
	  --iter 20000 --threads 5 --size 8 --iterator --clear --rebuild
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf sequence --dbm stdtree \
	  --iter 20000 --threads 5 --size 8
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf sequence --dbm stdtree \
	  --iter 20000 --threads 5 --size 8 --random_key --random_value
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf parallel --dbm stdtree \
	  --iter 20000 --threads 5 --size 8 --random_key --random_value
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf wicked --dbm stdtree \
	  --iter 20000 --threads 5 --size 8 --iterator --clear --rebuild

check-polydbm-perf :
	rm -Rf casket*
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf sequence --dbm poly --path casket \
	  --iter 10000 --threads 5 --size 8 \
	  --params "dbm=hash,file=std,num_buckets=100000,offset_width=3,align_pow=0"
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf sequence --dbm poly --path casket \
	  --iter 20000 --threads 5 --size 8 \
	  --params "dbm=hash,file=mmap-para,update_mode=in_place,num_buckets=100000"
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf sequence --dbm poly --path casket \
	  --iter 20000 --threads 5 --size 8 --random_key --random_value \
	  --params "dbm=hash,file=mmap-atom,update_mode=appending,num_buckets=100000"
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf parallel --dbm poly --path casket \
	  --iter 20000 --threads 5 --size 8 --random_key --random_value \
	  --params "dbm=hash,file=pos-para,num_buckets=100000,offset_width=3,align_pow=1"
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf wicked --dbm poly --path casket \
	  --iter 20000 --threads 5 --size 8 --iterator --clear --rebuild \
	  --params "dbm=hash,file=pos-atom,num_buckets=100000,fbp_capacity=0,lock_mem_buckets=false"

check-polydbm-util :
	rm -Rf casket*
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util create --dbm poly --buckets 10 casket.tkh
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util set --dbm poly casket.tkh one first
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util set --dbm poly casket.tkh two second
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util set --dbm poly casket.tkh three third
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util set --dbm poly casket.tkh four fourth
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util remove --dbm poly casket.tkh four
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util set --dbm poly casket.tkh five fifth
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util get --dbm poly casket.tkh two
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util export --dbm poly casket.tkh casket.flat
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util create --dbm poly --buckets 10 casket-2.tkh
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util import --dbm poly casket-2.tkh casket.flat
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util list --dbm poly casket-2.tkh
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util list --dbm poly --jump three --items 2 casket-2.tkh
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util export --dbm poly --tsv casket.tkh casket.tsv
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util create --dbm poly --buckets 10 casket-3.tkh
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util import --dbm poly --tsv casket-3.tkh casket.tsv
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util get --dbm poly casket-3.tkh three
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util rebuild --dbm poly casket.tkh
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util inspect --dbm poly casket.tkh
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util restore --dbm poly casket.tkh casket-new.tkh
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util set --dbm poly casket-new.tkh four fourth
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util get --dbm poly casket-new.tkh one
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util list --dbm poly casket-new.tkh
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util inspect --dbm poly casket-new.tkh

check-sharddbm-perf :
	rm -Rf casket*
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf sequence --dbm shard --path casket \
	  --iter 20000 --threads 5 --size 8 \
	  --params "dbm=tree,lock_mem_buckets=false,num_shards=3"
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf sequence --dbm shard --path casket \
	  --iter 20000 --threads 5 --size 8 --random_key --random_value \
	  --params "dbm=tree,lock_mem_buckets=false,num_shards=3"
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf parallel --dbm shard --path casket \
	  --iter 20000 --threads 5 --size 8 --random_key --random_value \
	  --params "dbm=tree,lock_mem_buckets=false,num_shards=3"
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf wicked --dbm shard --path casket \
	  --iter 20000 --threads 5 --size 8 --iterator --clear --rebuild \
	  --params "dbm=tree,lock_mem_buckets=false,num_shards=3"

check-sharddbm-util :
	rm -Rf casket*
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util create --dbm shard --buckets 10 casket.tkt \
	  --params "lock_mem_buckets=false,num_shards=3"
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util set --dbm shard casket.tkt one first
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util set --dbm shard casket.tkt two second
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util set --dbm shard casket.tkt three third
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util set --dbm shard casket.tkt four fourth
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util remove --dbm shard casket.tkt four
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util set --dbm shard casket.tkt five fifth
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util get --dbm shard casket.tkt two
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util export --dbm shard casket.tkt casket.flat
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util create --dbm shard --buckets 10 casket-2.tkt \
	  --params "lock_mem_buckets=false,num_shards=4"
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util import --dbm shard casket-2.tkt casket.flat
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util list --dbm shard casket-2.tkt
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util list --dbm shard --jump three --items 2 casket-2.tkt
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util export --dbm shard --tsv casket.tkt casket.tsv
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util create --dbm shard --buckets 10 casket-3.tkt
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util import --dbm shard --tsv casket-3.tkt casket.tsv
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util get --dbm shard casket-3.tkt three
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util rebuild --dbm shard casket.tkt
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util inspect --dbm shard casket.tkt
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util restore --dbm shard casket.tkt casket-new.tkt
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util set --dbm shard casket-new.tkt four fourth
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util get --dbm shard casket-new.tkt one
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util list --dbm shard casket-new.tkt
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_util inspect --dbm shard casket-new.tkt

check-index-perf :
	rm -Rf casket*
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf index --type file \
	  --iter 20000 --threads 5 --random_key --random_value --path casket.tkt
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf index --type mem \
	  --iter 20000 --threads 5 --random_key --random_value
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf index --type n2n \
	  --iter 20000 --threads 5 --random_key --random_value
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf index --type n2s \
	  --iter 20000 --threads 5 --random_key --random_value
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf index --type s2n \
	  --iter 20000 --threads 5 --random_key --random_value
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf index --type s2s \
	  --iter 20000 --threads 5 --random_key --random_value
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_perf index --type str \
	  --iter 20000 --threads 5 --random_key --random_value

test : $(TESTFILES)

testrun :
	$(RUNENV) $(RUNCMD) ./tkrzw_sys_config_test
	$(RUNENV) $(RUNCMD) ./tkrzw_lib_common_test
	$(RUNENV) $(RUNCMD) ./tkrzw_str_util_test
	$(RUNENV) $(RUNCMD) ./tkrzw_thread_util_test
	$(RUNENV) $(RUNCMD) ./tkrzw_containers_test
	$(RUNENV) $(RUNCMD) ./tkrzw_key_comparators_test
	$(RUNENV) $(RUNCMD) ./tkrzw_file_util_test
	$(RUNENV) $(RUNCMD) ./tkrzw_file_mmap_test
	$(RUNENV) $(RUNCMD) ./tkrzw_file_pos_test
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_common_impl_test
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_hash_impl_test
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_hash_test
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_tree_impl_test
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_tree_test
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_skip_impl_test
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_skip_test
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_tiny_test
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_baby_test
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_cache_test
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_std_test
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_poly_test
	$(RUNENV) $(RUNCMD) ./tkrzw_dbm_shard_test
	$(RUNENV) $(RUNCMD) ./tkrzw_index_test

apidoc :
	$(MAKE) apidocclean
	mkdir -p api-doc
	doxygen

apidocclean :
	rm -Rf api-doc

.PHONY : all clean untabify install install-strip uninstall \
  dist distclean check test testrun apidoc apidocclean

#================================================================
# Suffix rules
#================================================================

OBJS := $(LIBOBJFILES) $(COMMANDFILES:%=%.o) $(TESTFILES:%=%.o)
SRCS := $(OBJS:%.o=%.c)
DEPS := $(SRCS:%.c=%.d)

-include $(DEPS)

.SUFFIXES :
.SUFFIXES : .c .cc .o

.c.o :
	$(CC) -c $(CPPFLAGS) -MMD $(CFLAGS) $<

.cc.o :
	$(CXX) -c $(CPPFLAGS) -MMD $(CXXFLAGS) $<

#================================================================
# Building libraries
#================================================================

libtkrzw.a : $(LIBOBJFILES)
	$(AR) $(ARFLAGS) $@ $(LIBOBJFILES)

libtkrzw.so.$(LIBVER).$(LIBREV).0 : $(LIBOBJFILES)
	if uname -a | egrep -i 'SunOS' > /dev/null ; \
	  then \
	    $(CXX) $(CXXFLAGS) -shared -Wl,-G,-h,libtkrzw.so.$(LIBVER) -o $@ \
	      $(LIBOBJFILES) $(LDFLAGS) $(LIBS) ; \
	  else \
	    $(CXX) $(CXXFLAGS) -shared -Wl,-soname,libtkrzw.so.$(LIBVER) -o $@ \
	      $(LIBOBJFILES) $(LDFLAGS) $(LIBS) ; \
	  fi

libtkrzw.so.$(LIBVER) : libtkrzw.so.$(LIBVER).$(LIBREV).0
	ln -f -s libtkrzw.so.$(LIBVER).$(LIBREV).0 $@

libtkrzw.so : libtkrzw.so.$(LIBVER).$(LIBREV).0
	ln -f -s libtkrzw.so.$(LIBVER).$(LIBREV).0 $@

libtkrzw.$(LIBVER).$(LIBREV).0.dylib : $(LIBOBJFILES)
	$(CXX) $(CXXFLAGS) -dynamiclib -o $@ \
	  -install_name $(LIBDIR)/libtkrzw.$(LIBVER).dylib \
	  -current_version $(LIBVER).$(LIBREV).0 -compatibility_version $(LIBVER) \
	  $(LIBOBJFILES) $(LDFLAGS) $(LIBS)

libtkrzw.$(LIBVER).dylib : libtkrzw.$(LIBVER).$(LIBREV).0.dylib
	ln -f -s libtkrzw.$(LIBVER).$(LIBREV).0.dylib $@

libtkrzw.dylib : libtkrzw.$(LIBVER).$(LIBREV).0.dylib
	ln -f -s libtkrzw.$(LIBVER).$(LIBREV).0.dylib $@

#================================================================
# Building commands
#================================================================

tkrzw_build_util : tkrzw_build_util.o $(LIBRARYFILES)
	$(CXX) $(CXXFLAGS) -o $@ $< $(LDFLAGS) $(CMDLDFLAGS) $(CMDLIBS) $(LIBS)

tkrzw_str_perf : tkrzw_str_perf.o $(LIBRARYFILES)
	$(CXX) $(CXXFLAGS) -o $@ $< $(LDFLAGS) $(CMDLDFLAGS) $(CMDLIBS) $(LIBS)

tkrzw_file_perf : tkrzw_file_perf.o $(LIBRARYFILES)
	$(CXX) $(CXXFLAGS) -o $@ $< $(LDFLAGS) $(CMDLDFLAGS) $(CMDLIBS) $(LIBS)

tkrzw_dbm_perf : tkrzw_dbm_perf.o $(LIBRARYFILES)
	$(CXX) $(CXXFLAGS) -o $@ $< $(LDFLAGS) $(CMDLDFLAGS) $(CMDLIBS) $(LIBS)

tkrzw_dbm_util : tkrzw_dbm_util.o $(LIBRARYFILES)
	$(CXX) $(CXXFLAGS) -o $@ $< $(LDFLAGS) $(CMDLDFLAGS) $(CMDLIBS) $(LIBS)

#================================================================
# Building tests
#================================================================

tkrzw_sys_config_test : tkrzw_sys_config_test.o $(LIBRARYFILES)
	$(CXX) $(CXXFLAGS) -o $@ $< $(CMDLDFLAGS) $(CMDLIBS) $(TESTLIBS) $(LIBS)

tkrzw_lib_common_test : tkrzw_lib_common_test.o $(LIBRARYFILES)
	$(CXX) $(CXXFLAGS) -o $@ $< $(CMDLDFLAGS) $(CMDLIBS) $(TESTLIBS) $(LIBS)

tkrzw_str_util_test : tkrzw_str_util_test.o $(LIBRARYFILES)
	$(CXX) $(CXXFLAGS) -o $@ $< $(CMDLDFLAGS) $(CMDLIBS) $(TESTLIBS) $(LIBS)

tkrzw_cmd_util_test : tkrzw_cmd_util_test.o $(LIBRARYFILES)
	$(CXX) $(CXXFLAGS) -o $@ $< $(CMDLDFLAGS) $(CMDLIBS) $(TESTLIBS) $(LIBS)

tkrzw_thread_util_test : tkrzw_thread_util_test.o $(LIBRARYFILES)
	$(CXX) $(CXXFLAGS) -o $@ $< $(CMDLDFLAGS) $(CMDLIBS) $(TESTLIBS) $(LIBS)

tkrzw_containers_test : tkrzw_containers_test.o $(LIBRARYFILES)
	$(CXX) $(CXXFLAGS) -o $@ $< $(CMDLDFLAGS) $(CMDLIBS) $(TESTLIBS) $(LIBS)

tkrzw_key_comparators_test : tkrzw_key_comparators_test.o $(LIBRARYFILES)
	$(CXX) $(CXXFLAGS) -o $@ $< $(CMDLDFLAGS) $(CMDLIBS) $(TESTLIBS) $(LIBS)

tkrzw_file_util_test : tkrzw_file_util_test.o $(LIBRARYFILES)
	$(CXX) $(CXXFLAGS) -o $@ $< $(CMDLDFLAGS) $(CMDLIBS) $(TESTLIBS) $(LIBS)

tkrzw_file_std_test : tkrzw_file_std_test.o $(LIBRARYFILES)
	$(CXX) $(CXXFLAGS) -o $@ $< $(CMDLDFLAGS) $(CMDLIBS) $(TESTLIBS) $(LIBS)

tkrzw_file_mmap_test : tkrzw_file_mmap_test.o $(LIBRARYFILES)
	$(CXX) $(CXXFLAGS) -o $@ $< $(CMDLDFLAGS) $(CMDLIBS) $(TESTLIBS) $(LIBS)

tkrzw_file_pos_test : tkrzw_file_pos_test.o $(LIBRARYFILES)
	$(CXX) $(CXXFLAGS) -o $@ $< $(CMDLDFLAGS) $(CMDLIBS) $(TESTLIBS) $(LIBS)

tkrzw_dbm_common_impl_test : tkrzw_dbm_common_impl_test.o $(LIBRARYFILES)
	$(CXX) $(CXXFLAGS) -o $@ $< $(CMDLDFLAGS) $(CMDLIBS) $(TESTLIBS) $(LIBS)

tkrzw_dbm_hash_impl_test : tkrzw_dbm_hash_impl_test.o $(LIBRARYFILES)
	$(CXX) $(CXXFLAGS) -o $@ $< $(CMDLDFLAGS) $(CMDLIBS) $(TESTLIBS) $(LIBS)

tkrzw_dbm_hash_test : tkrzw_dbm_hash_test.o $(LIBRARYFILES)
	$(CXX) $(CXXFLAGS) -o $@ $< $(CMDLDFLAGS) $(CMDLIBS) $(TESTLIBS) $(LIBS)

tkrzw_dbm_tree_impl_test : tkrzw_dbm_tree_impl_test.o $(LIBRARYFILES)
	$(CXX) $(CXXFLAGS) -o $@ $< $(CMDLDFLAGS) $(CMDLIBS) $(TESTLIBS) $(LIBS)

tkrzw_dbm_tree_test : tkrzw_dbm_tree_test.o $(LIBRARYFILES)
	$(CXX) $(CXXFLAGS) -o $@ $< $(CMDLDFLAGS) $(CMDLIBS) $(TESTLIBS) $(LIBS)

tkrzw_dbm_skip_impl_test : tkrzw_dbm_skip_impl_test.o $(LIBRARYFILES)
	$(CXX) $(CXXFLAGS) -o $@ $< $(CMDLDFLAGS) $(CMDLIBS) $(TESTLIBS) $(LIBS)

tkrzw_dbm_skip_test : tkrzw_dbm_skip_test.o $(LIBRARYFILES)
	$(CXX) $(CXXFLAGS) -o $@ $< $(CMDLDFLAGS) $(CMDLIBS) $(TESTLIBS) $(LIBS)

tkrzw_dbm_tiny_test : tkrzw_dbm_tiny_test.o $(LIBRARYFILES)
	$(CXX) $(CXXFLAGS) -o $@ $< $(CMDLDFLAGS) $(CMDLIBS) $(TESTLIBS) $(LIBS)

tkrzw_dbm_baby_test : tkrzw_dbm_baby_test.o $(LIBRARYFILES)
	$(CXX) $(CXXFLAGS) -o $@ $< $(CMDLDFLAGS) $(CMDLIBS) $(TESTLIBS) $(LIBS)

tkrzw_dbm_cache_test : tkrzw_dbm_cache_test.o $(LIBRARYFILES)
	$(CXX) $(CXXFLAGS) -o $@ $< $(CMDLDFLAGS) $(CMDLIBS) $(TESTLIBS) $(LIBS)

tkrzw_dbm_std_test : tkrzw_dbm_std_test.o $(LIBRARYFILES)
	$(CXX) $(CXXFLAGS) -o $@ $< $(CMDLDFLAGS) $(CMDLIBS) $(TESTLIBS) $(LIBS)

tkrzw_dbm_poly_test : tkrzw_dbm_poly_test.o $(LIBRARYFILES)
	$(CXX) $(CXXFLAGS) -o $@ $< $(CMDLDFLAGS) $(CMDLIBS) $(TESTLIBS) $(LIBS)

tkrzw_dbm_shard_test : tkrzw_dbm_shard_test.o $(LIBRARYFILES)
	$(CXX) $(CXXFLAGS) -o $@ $< $(CMDLDFLAGS) $(CMDLIBS) $(TESTLIBS) $(LIBS)

tkrzw_index_test : tkrzw_index_test.o $(LIBRARYFILES)
	$(CXX) $(CXXFLAGS) -o $@ $< $(CMDLDFLAGS) $(CMDLIBS) $(TESTLIBS) $(LIBS)

# END OF FILE
